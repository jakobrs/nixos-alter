#!/usr/bin/env bash

showHelp() {
  less -F <<EOF
nixos-alter

-b --boot                   Make the boot default. Implies --modify-profile
-a --activate               Activate
-m --modify-profile         Modify the profile to be the result configuration
-l --link                   Create a symlink in the current directory. Default name of link is ./result
   --force                  Build even without any of the above options
   --build-vm               Build the system as a virtual machine. Conflicts with --boot, --activate, and --modify-profile
   --include-bootloader     Build the virtual machine with a boot loader

-D --delete-profile         Delete the profile

-o --out <path>             Sets the path the symlink generated by --link is located at. Implies --link
-P --profile <path>         Path to the profile to use. Defaults to /nix/var/nix/profiles/system
-p --profile-name <name>    Name of the profile to use. Mostly equivalent to --profile /nix/var/nix/profiles/system-profiles/<name>

-E --extra-build-arg <arg>  Extra argument to nix-build or nix build
-I --include <nix path>     Adds <nix path> to the Nix path
-c --channel <channel>      Like -I nixpkgs=<channel>, but the channel is referred to by name.
   --show-trace             Show trace
-j --max-jobs               Max jobs
-K --keep-failed            Keep failed
-k --keep-going             Keep going

-g --generation <n>         Use this generation instead of rebuilding. Avoids creating duplicate generations.
   --raw <path>             Use this store path instead of rebuilding
   --booted-config          Same as --raw /run/booted-system
   --current-config         Same as --raw /run/current-system

   --upgrade                Update the 'nixos' channel
   --old-nix                Use nix-build instead of nix-command when building the system configuration
   --no-rebuild-nix         Don't rebuild Nix
   --fast                   Implies --show-trace and --no-rebuild-nix
   --list-generations       List all generations
   --help                   Display usage information

The first two groups of flags conflict with each other.

Note that, currently, --profile and --profile-name must occur before --list-generations.

Abbreviations:

test                     --activate                             -a
boot                     --boot                                 -b
switch                   --boot --activate                      -ba
build                    --link                                 -l
build-vm                 --build-vm --link
build-vm-with-bootloader --build-vm --include-bootloader --link
EOF
  exit 1
}

extraBuildArgs=()

# Category 1
boot=0
activate=0
modify=0
link=0
force=0
build_vm=0
include_bootloader=0
# Category 2
delete=0

out=$PWD/result
profile=/nix/var/nix/profiles/system
pathToConfig=
generation=
old_nix=0
rebuild_nix=1
tmpdir="$(mktemp -d)"

trap 'rm -r $tmpdir' EXIT

while [ "$#" -gt 0 ]; do
  arg="$1"; shift 1

  # Handling of one-letter args
  if [[ "$arg" =~ ^-[^-] ]]; then
    arg=${arg:1} # Remove the dash

    newArgs=()

    while [ -n "$arg" ]; do
      argc=${arg:0:1}
      arg=${arg:1}

      case "$argc" in
        b)
          newArgs+=(--boot)
          ;;
        a)
          newArgs+=(--activate)
          ;;
        m)
          newArgs+=(--modify-profile)
          ;;
        l)
          newArgs+=(--link)
          ;;
        D)
          newArgs+=(--delete-profile)
          ;;
        o)
          if [ -n "$arg" ]; then
            newArgs+=(--out "$arg")
          else
            newArgs+=(--out)
          fi
          arg=
          ;;
        p)
          if [ -n "$arg" ]; then
            newArgs+=(--profile-name "$arg")
          else
            newArgs+=(--profile-name)
          fi
          arg=
          ;;
        P)
          if [ -n "$arg" ]; then
            newArgs+=(--profile "$arg")
          else
            newArgs+=(--profile)
          fi
          arg=
          ;;
        I)
          if [ -n "$arg" ]; then
            newArgs+=(--include "$arg")
          else
            newArgs+=(--include)
          fi
          arg=
          ;;
        c)
          if [ -n "$arg" ]; then
            newArgs+=(--channel "$arg")
          else
            newArgs+=(--channel)
          fi
          arg=
          ;;
        E)
          if [ -n "$arg" ]; then
            newArgs+=(--extra-build-arg "$arg")
          else
            newArgs+=(--extra-build-arg)
          fi
          arg=
          ;;
        j)
          if [ -n "$arg" ]; then
            newArgs+=(--max-jobs "$arg")
          else
            newArgs+=(--max-jobs)
          fi
          arg=
          ;;
        K)
          newArgs+=(--keep-failed)
          ;;
        k)
          newArgs+=(--keep-going)
          ;;
        g)
          if [ -n "$arg" ]; then
            newArgs+=(--generation "$arg")
          else
            newArgs+=(--generation)
          fi
          arg=
          ;;
        *)
          echo "nixos-alter: Argument '-$argc' is not recognised" >&2
          exit 1
          ;;
      esac
    done

    set -- "${newArgs[@]}" "$@"

    arg="$1"; shift 1
  elif [[ "$arg" =~ ^(test|boot|switch|build|build-vm|build-vm-with-bootloader)$ ]]; then
    case "$arg" in
      test)
        set -- --activate "$@"
        ;;
      boot)
        set -- --boot "$@"
        ;;
      switch)
        set -- --activate --boot "$@"
        ;;
      build)
        set -- --link "$@"
        ;;
      build-vm)
        set -- --build-vm --link "$@"
        ;;
      build-vm-with-bootloader)
        set -- --build-vm --include-bootloader --link "$@"
        ;;
    esac

    arg="$1"; shift 1
  fi

  case "$arg" in
    --boot)
      boot=1
      modify=1
      ;;
    --activate)
      activate=1
      ;;
    --modify-profile)
      modify=1
      ;;
    --link)
      link=1
      ;;
    --force)
      force=1
      ;;
    --build-vm)
      build_vm=1
      ;;
    --include-bootloader)
      build_vm=1
      include_bootloader=1
      ;;
    --delete-profile)
      delete=1
      ;;
    --out)
      if [ -z "$1" ]; then
        echo "nixos-alter: '--out' requires an argument" >&2
        exit 1
      fi

      link=1
      out=$(realpath -s "$1")

      shift 1
      ;;
    --profile)
      if [ -z "$1" ]; then
        echo "nixos-alter: '--profile' requires an argument" >&2
        exit 1
      fi
      if [ "$1" != system ]; then
        profile=$(realpath -s "$1")
      fi
      shift 1
      ;;
    --profile-name)
      if [ -z "$1" ]; then
        echo "nixos-alter: '--profile-name' requires an argument" >&2
        exit 1
      fi
      if [ "$1" == system ]; then
        profile="/nix/var/nix/profiles/system"
      else
        profile="/nix/var/nix/profiles/system-profiles/$1"
        mkdir -p -m 0755 "$(dirname "$profile")"
      fi
      shift 1
      ;;
    --extra-build-arg)
      if [ -z "$1" ]; then
        echo "nixos-alter: '--extra-build-arg' requires an argument" >&2
        exit 1
      fi
      extraBuildArgs+=("$1")
      shift 1
      ;;
    --include|--max-jobs)
      if [ -z "$1" ]; then
        echo "nixos-alter: '$arg' requires an argument" >&2
        exit 1
      fi
      extraBuildArgs+=("$arg" "$1")
      shift 1
      ;;
    --channel)
      if [ -z "$1" ]; then
        echo "nixos-alter: '--channel' requires an argument" >&2
        exit 1
      fi
      extraBuildArgs+=("--include" "nixpkgs=$(nix-instantiate --find-file "$1")")
      shift 1
      ;;
    --show-trace|--keep-failed|--keep-going)
      extraBuildArgs+=("$arg")
      ;;
    --generation)
      if [ -z "$1" ]; then
        echo "nixos-alter: '--generation' requires an argument" >&2
        exit 1
      fi
      generation="$1"
      shift 1
      ;;
    --raw)
      if [ -z "$1" ]; then
        echo "nixos-alter: '--raw' requires an argument" >&2
        exit 1
      fi
      pathToConfig="$(realpath "$1")"
      shift 1
      ;;
    --booted-config)
      pathToConfig=$(realpath /run/booted-system)
      ;;
    --current-config)
      pathToConfig=$(realpath /run/current-system)
      ;;
    --upgrade)
      nix-channel --update nixos
      ;;
    --old-nix)
      old_nix=1
      ;;
    --no-rebuild-nix)
      rebuild_nix=0
      ;;
    --fast)
      rebuild_nix=0
      extraBuildArgs+=("--show-trace")
      ;;
    --list-generations)
      nix-env --list-generations -p "$profile"
      exit 1
      ;;
    --help)
      showHelp
      ;;
    *)
      echo "nixos-alter: Argument '$arg' is not recognised" >&2
      exit 1
      ;;
  esac
done

# There's probably a better way to do this
[ "$boot" -eq 1 ] || [ "$activate" -eq 1 ] || [ "$modify" -eq 1 ] || [ "$link" -eq 1 ] || [ "$force" -eq 1 ] || [ "$build_vm" -eq 1 ] || [ "$include_bootloader" -eq 1 ] && category_1=1 || category_1=0
[ "$delete" -eq 1 ]                                                                                                                                                      && category_2=1 || category_2=0

if [ $((category_1 + category_2)) -ne 1 ]; then
  echo "error: Exactly one of the first two groups of flags expected" >&2
  exit 1
fi

# build_attr <attr> <id>
build_attr() {
  if [ "$old_nix" -eq 1 ]; then
    nix-build '<nixpkgs/nixos>' -A "$1" "${extraBuildArgs[@]}"

    if [ $? -eq 1 ]; then
      exit 1
    fi
  else
    nix build -f '<nixpkgs/nixos>' "$1" "${extraBuildArgs[@]}" --out-link "$tmpdir/$2"
    if [ $? -eq 1 ]; then
      exit 1
    fi
    realpath "$tmpdir/$2"
  fi
}

if [ "$category_1" -eq 1 ]; then
  # Category 1
  if [ "$build_vm" -eq 1 ]; then
    if [ "$boot" -eq 1 ] || [ "$activate" -eq 1 ] || [ "$modify" -eq 1 ]; then
      echo "Error: --build-vm cannot be used with --boot, --activate, and --modify-profile" >&2
      exit 1
    fi
  fi

  if [ -n "$generation" ]; then
    pathToConfig=$(realpath "$profile-$generation-link")
  fi
  if [ -z "$pathToConfig" ]; then
    if [ "$rebuild_nix" -eq 1 ]; then
      echo "Building Nix..." >&2

      pathToNix="$(build_attr config.nix.package.out nix)"
      if [ $? -eq 1 ]; then
        echo "Something went wrong while building Nix." >&2
        exit 1
      fi

      PATH="$pathToNix/bin:$PATH"
    fi

    if [ "$build_vm" -eq 1 ]; then
      echo "Building the virtual machine..." >&2

      [ "$include_bootloader" -eq 1 ] && attr=vmWithBootLoader || attr=vm
      pathToConfig="$(build_attr "$attr" vm)"
      if [ $? -eq 1 ]; then
        echo "Something went wrong while building the virtual machine." >&2
        exit 1
      fi
    else
      echo "Building the system configuration..." >&2

      pathToConfig="$(build_attr system system)"
      if [ $? -eq 1 ]; then
        echo "Something went wrong while building the system configuration." >&2
        exit 1
      fi
    fi
  else
    echo "Skipping rebuild" >&2
  fi

  if [ "$link" -eq 1 ]; then
    nix-store --realise "$pathToConfig" --add-root "$out" --indirect
  elif [ "$modify" -eq 1 ] || [ "$boot" -eq 1 ]; then
    echo "$profile"
  else
    echo "$pathToConfig"
  fi
  # Note that we don't allow --boot without --modify-profile
  if [ "$modify" -eq 1 ] || [ "$boot" -eq 1 ]; then
    if [ -n "$generation" ]; then
      nix-env -p "$profile" --switch-generation "$generation"
    else
      nix-env -p "$profile" --set "$pathToConfig"
    fi
  fi
  if [ "$boot" -eq 1 ]; then
    if ! [[ "$profile" =~ ^/nix/var/nix/profiles ]]; then
      echo "warning: It looks like you're trying to set the boot default to a profile"    >&2
      echo "         that is not in /nix/var/nix/profiles. This is not something you're"  >&2
      echo "         supposed to do."                                                     >&2
    fi
    "$pathToConfig/bin/switch-to-configuration" boot
  fi
  if [ "$activate" -eq 1 ]; then
    "$pathToConfig/bin/switch-to-configuration" test
  fi
elif [ "$category_2" -eq 1 ]; then
  rm "$profile" "$profile"-*-link
fi
