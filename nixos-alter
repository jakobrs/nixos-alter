#!/usr/bin/env bash

showHelp() {
  cat <<EOF
nixos-alter

-b --boot                   Make the boot default. Implies --modify-profile
-a --activate               Activate
-m --modify-profile         Modify the profile to be the result configuration
-l --link                   Create a symlink in the current directory. Default name of link is ./result

-D --delete-profile         Delete the profile

-o --out <path>             Sets the path the symlink generated by --link is located at. Implies --link
-P --profile <path>         Path to the profile to use. Defaults to /nix/var/nix/profiles/system
-p --profile-name <name>    Name of the profile to use. Mostly equivalent to --profile /nix/var/nix/profiles/system-profiles/<name>

-E --extra-build-arg <arg>  Extra argument to nix-build or nix build
-I --include <nix path>     Adds <nix path> to the Nix path
   --show-trace             Show trace
-j --max-jobs               Max jobs
-K --keep-failed            Keep failed
-k --keep-going             Keep going

-g --generation <n>         Use this generation instead of rebuilding
   --raw <path>             Use this store path instead of rebuilding
   --current-generation     Same as --generation <current ceneration>
   --booted-config          Same as --raw /run/booted-system
   --current-config         Same as --raw /run/current-system

   --upgrade                Update the 'nixos' channel
   --old-nix                Use nix-build instead of nix-command when building the system configuration
   --no-rebuild-nix         Don't rebuild Nix
   --fast                   Implies --show-trace and --no-rebuild-nix
   --list-generations       List all generations
   --help                   Display usage information

--boot, --activate, --modify-profile, and --link conflict with --delete-profile.

Note that, currently, --profile and --profile-name must occur before --list-generations, --generation or --current-generation.

Abbreviations:

test          --activate            -a
boot          --boot                -b
switch        --boot --activate     -ba
build         --link                -l
EOF
  exit 1
}

extraBuildArgs=()
boot=0
activate=0
modify=0
link=0
delete=0
out=$PWD/result
profile=/nix/var/nix/profiles/system
pathToConfig=
old_nix=0
rebuild_nix=1
tmpdir="$(mktemp -d)"

while [ "$#" -gt 0 ]; do
  arg="$1"; shift 1

  # Handling of one-letter args
  if [[ "$arg" =~ ^-(b|a|m|l|D|o|p|P|I|E|j|K|k|g) ]]; then
    arg=${arg:1} # Remove the dash

    newArgs=()

    while [ -n "$arg" ]; do
      argc=${arg:0:1}
      arg=${arg:1}

      case "$argc" in
        b)
          newArgs+=(--boot)
          ;;
        a)
          newArgs+=(--activate)
          ;;
        m)
          newArgs+=(--modify-profile)
          ;;
        l)
          newArgs+=(--link)
          ;;
        D)
          newArgs+=(--delete)
          ;;
        o)
          if [ -n "$arg" ]; then
            newArgs+=(--out "$arg")
          else
            newArgs+=(--out)
          fi
          arg=
          ;;
        p)
          if [ -n "$arg" ]; then
            newArgs+=(--profile-name "$arg")
          else
            newArgs+=(--profile-name)
          fi
          arg=
          ;;
        P)
          if [ -n "$arg" ]; then
            newArgs+=(--profile "$arg")
          else
            newArgs+=(--profile)
          fi
          arg=
          ;;
        I)
          if [ -n "$arg" ]; then
            newArgs+=(--include "$arg")
          else
            newArgs+=(--include)
          fi
          arg=
          ;;
        E)
          if [ -n "$arg" ]; then
            newArgs+=(--extra-build-arg "$arg")
          else
            newArgs+=(--extra-build-arg)
          fi
          arg=
          ;;
        j)
          if [ -n "$arg" ]; then
            newArgs+=(--max-jobs "$arg")
          else
            newArgs+=(--max-jobs)
          fi
          arg=
          ;;
        K)
          newArgs+=(--keep-failed)
          ;;
        k)
          newArgs+=(--keep-going)
          ;;
        g)
          if [ -n "$arg" ]; then
            newArgs+=(--generation "$arg")
          else
            newArgs+=(--generation)
          fi
          arg=
          ;;
      esac
    done

    set -- "${newArgs[@]}" "$@"

    arg="$1"; shift 1
  elif [[ "$arg" =~ ^(test|boot|switch|build)$ ]]; then
    case "$arg" in
      test)
        set -- --activate "$@"
        ;;
      boot)
        set -- --boot "$@"
        ;;
      switch)
        set -- --activate --boot "$@"
        ;;
      build)
        set -- --link "$@"
        ;;
    esac

    arg="$1"; shift 1
  fi

  case "$arg" in
    --boot)
      boot=1
      modify=1
      ;;
    --activate)
      activate=1
      ;;
    --modify-profile)
      modify=1
      ;;
    --link)
      link=1
      ;;
    --delete)
      delete=1
      ;;
    --out)
      if [ -z "$1" ]; then
        echo "$0: '--out' requires an argument" >&2
        exit 1
      fi

      link=1
      out=$(realpath -s "$1")

      shift 1
      ;;
    --profile)
      if [ -z "$1" ]; then
        echo "$0: '--profile' requires an argument" >&2
        exit 1
      fi
      if [ "$1" != system ]; then
        profile=$(realpath -s "$1")
      fi
      shift 1
      ;;
    --profile-name)
      if [ -z "$1" ]; then
        echo "$0: '--profile-name' requires an argument" >&2
        exit 1
      fi
      if [ "$1" == system ]; then
        profile="/nix/var/nix/profiles/system"
      else
        profile="/nix/var/nix/profiles/system-profiles/$1"
        mkdir -p -m 0755 "$(dirname "$profile")"
      fi
      shift 1
      ;;
    --extra-build-arg)
      if [ -z "$1" ]; then
        echo "$0: '--extra-build-arg' requires an argument" >&2
        exit 1
      fi
      extraBuildArgs+=("$1")
      shift 1
      ;;
    --include|--max-jobs)
      if [ -z "$1" ]; then
        echo "$0: '$arg' requires an argument" >&2
        exit 1
      fi
      extraBuildArgs+=("$arg" "$1")
      shift 1
      ;;
    --show-trace|--keep-failed|--keep-going)
      extraBuildArgs+=("$arg")
      ;;
    --generation)
      if [ -z "$1" ]; then
        echo "$0: '--generation' requires an argument" >&2
        exit 1
      fi
      pathToConfig=$(realpath "$profile-$1-link")
      shift 1
      ;;
    --raw)
      if [ -z "$1" ]; then
        echo "$0: '--raw' requires an argument" >&2
        exit 1
      fi
      pathToConfig="$(realpath "$1")"
      shift 1
      ;;
    --current-generation)
      pathToConfig=$(realpath "$profile")
      ;;
    --booted-config)
      pathToConfig=$(realpath /run/booted-system)
      ;;
    --current-config)
      pathToConfig=$(realpath /run/current-system)
      ;;
    --upgrade)
      nix-channel --update nixos
      ;;
    --old-nix)
      old_nix=1
      ;;
    --no-rebuild-nix)
      rebuild_nix=0
      ;;
    --fast)
      rebuild_nix=0
      extraBuildArgs+=("--show-trace")
      ;;
    --list-generations)
      nix-env --list-generations -p "$profile"
      exit 1
      ;;
    --help)
      showHelp
      ;;
    *)
      echo "$0: Argument '$arg' is not recognised" >&2
      exit 1
      ;;
  esac
done

if [ "$delete" -eq 1 ]; then
  if [ "$boot" -eq 1 ] || [ "$activate" -eq 1 ] || [ "$modify" -eq 1 ] || [ "$link" -eq 1 ]; then
    echo "error: Can't use --boot, --activate, --modify-profile, or --link with --delete-profile" >&2
    exit 1
  fi

  rm "$profile" "$profile"-*-link
  exit 0
fi

if [ "$boot" -eq 0 ] && [ "$activate" -eq 0 ] && [ "$modify" -eq 0 ] && [ "$link" -eq 0 ]; then
  echo "warning: None of --boot, --activate, --modify-profile, and --link specified" >&2
fi

if [ -z "$pathToConfig" ]; then
  if [ "$rebuild_nix" -eq 1 ]; then
    echo "Building Nix..." >&2

    if [ "$old_nix" -eq 1 ]; then
      pathToNix="$(nix-build '<nixpkgs/nixos>' -A config.nix.package.out "${extraBuildArgs[@]}")"

      if [ $? -eq 1 ]; then
        echo "Something went wrong while building Nix." >&2
        exit 1
      fi
    else
      nix build -f '<nixpkgs/nixos>' config.nix.package.out "${extraBuildArgs[@]}" --out-link "$tmpdir/nix"
      if [ $? -eq 1 ]; then
        echo "Something went wrong while building Nix." >&2
        exit 1
      fi
      pathToNix="$(realpath "$tmpdir/nix")"
    fi

    PATH="$pathToNix/bin:$PATH"
  fi

  echo "Building the system configuration..." >&2

  if [ "$old_nix" -eq 1 ]; then
    pathToConfig="$(nix-build '<nixpkgs/nixos>' --no-out-link -A system "${extraBuildArgs[@]}")"

    if [ $? -eq 1 ]; then
      echo "Something went wrong while building the system configuration." >&2
      exit 1
    fi
  else
    nix build -f '<nixpkgs/nixos>' --out-link "$tmpdir/system" system "${extraBuildArgs[@]}"
    if [ $? -eq 1 ]; then
      echo "Something went wrong while building the system configuration." >&2
      exit 1
    fi
    pathToConfig="$(realpath "$tmpdir/system")"
  fi
else
  echo "Skipping rebuild" >&2
fi

if [ "$link" -eq 1 ]; then
  nix-store --realise "$pathToConfig" --add-root "$out" --indirect
elif [ "$modify" -eq 1 ] || [ "$boot" -eq 1 ]; then
  echo "$profile"
else
  echo "$pathToConfig"
fi 
# Note that we don't allow --boot without --modify-profile
if [ "$modify" -eq 1 ] || [ "$boot" -eq 1 ]; then
  nix-env -p "$profile" --set "$pathToConfig"
fi
if [ "$boot" -eq 1 ]; then
  if ! [[ "$profile" =~ ^/nix/var/nix/profiles ]]; then
    echo "warning: It looks like you're trying to set the boot default to a profile"    >&2
    echo "         that is not in /nix/var/nix/profiles. This is not something you're"  >&2
    echo "         supposed to do."                                                     >&2
  fi
  "$pathToConfig/bin/switch-to-configuration" boot
fi
if [ "$activate" -eq 1 ]; then
  "$pathToConfig/bin/switch-to-configuration" test
fi

rm -r "$tmpdir"
