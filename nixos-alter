#!/usr/bin/env bash

showHelp() {
  cat <<EOF
nixos-alter

-b --boot                 Make the boot default
-a --activate             Activate
-l --link                 Create a symlink in the current directory. Default name of link is ./result
-P --profile <path>       Path to the profile to use. Defaults to /nix/var/nix/profiles/system
-p --profile-name <name>  Name of the profile to use. Mostly equivalent to --profile /nix/var/nix/profiles/system-profiles/<name>
-o --out <path>           Sets the path the symlink generated by --link is located at. Implies --link
-g --generation <n>       Use this generation instead of rebuilding
   --no-rebuild           Don't rebuild (shorthand for --generation <current ceneration>)   [NYI]

   --list-generations List all generations
   --help             Display usage information

Note that, currently, --profile must occur before --list-generations or --no-rebuild.

Abbreviations:

test          --activate            -a
boot          --boot                -b
switch        --boot --activate     -ba
build         --link                -l
EOF
  exit 1
}

origArgs=("$@")
args=("$@")

boot=0
activate=0
link=0
out=$PWD/result
profile=/nix/var/nix/profiles/system
generation=

while [ "$#" -gt 0 ]; do
  arg="$1"; shift 1

  # Handling of one-letter args
  if [[ "$arg" =~ ^-(a|b|l|o|P|p|g) ]]; then
    arg=${arg:1} # Remove the dash

    newArgs=()

    while [ -n "$arg" ]; do
      argc=${arg:0:1}
      arg=${arg:1}

      case "$argc" in
        a)
          newArgs+=(--activate)
          ;;
        b)
          newArgs+=(--boot)
          ;;
        l)
          newArgs+=(--link)
          ;;
        o)
          if [ -n "$arg" ]; then
            newArgs+=(--out "$arg")
          else
            newArgs+=(--out)
          fi
          arg=
          ;;
        P)
          if [ -n "$arg" ]; then
            newArgs+=(--profile "$arg")
          else
            newArgs+=(--profile)
          fi
          arg=
          ;;
        p)
          if [ -n "$arg" ]; then
            newArgs+=(--profile-name "$arg")
          else
            newArgs+=(--profile-name)
          fi
          arg=
          ;;
        g)
          if [ -n "$arg" ]; then
            newArgs+=(--generation "$arg")
          else
            newArgs+=(--generation)
          fi
          arg=
          ;;
      esac
    done

    set -- "${newArgs[@]}" "$@"

    arg="$1"; shift 1
  elif [[ "$arg" =~ ^(test|boot|switch|build)$ ]]; then
    case "$arg" in
      test)
        set -- --activate "$@"
        ;;
      boot)
        set -- --boot "$@"
        ;;
      switch)
        set -- --activate --boot "$@"
        ;;
      build)
        set -- --link "$@"
        ;;
    esac

    arg="$1"; shift 1
  fi

  case "$arg" in
    --activate)
      activate=1
      ;;
    --boot)
      boot=1
      ;;
    --link)
      link=1
      ;;
    --out)
      if [ -z "$1" ]; then
        echo "$0: '--out' requires an argument"
        exit 1
      fi

      link=1
      out=$(realpath -s $1)

      shift 1
      ;;
    --profile)
      if [ -z "$1" ]; then
        echo "$0: '--profile' requires an argument"
        exit 1
      fi
      if [ "$1" != system ]; then
        profile=$(realpath -s $1)
      fi
      shift 1
      ;;
    --profile-name)
      if [ -z "$1" ]; then
        echo "$0: '--profile-name' requires an argument"
        exit 1
      fi
      if [ "$1" == system ]; then
        profile="/nix/var/nix/profiles/system"
      else
        profile="/nix/var/nix/profiles/system-profiles/$1"
        mkdir -p -m 0755 "$(dirname "$profile")"
      fi
      shift 1
      ;;
    --no-rebuild)
      echo "--no-rebuild is not yet implemented"
      exit 1
      ;;
    --generation)
      if [ -z "$1" ]; then
        echo "$0: '--generation' requires an argument"
        exit 1
      fi
      generation="$1"
      shift 1
      ;;
    --list-generations)
      nix-env --list-generations -p "$profile"
      exit 1
      ;;
    --help)
      showHelp
      ;;
    *)
      echo "$0: Argument '$arg' is not recognised"
      exit 1
      ;;
  esac
done

echo "Boot?       $boot"                              >&2
echo "Activate?   $activate"                          >&2
echo "Link?       $link"                              >&2
echo "Out:        $out"                               >&2
echo "Profile:    $profile"                           >&2
echo "Generation: $generation (empty means rebuild)"  >&2
echo                                                  >&2

if [ "$boot" -eq 0 -a "$activate" -eq 0 -a "$link" -eq 0 ]; then
  echo error: You need to specify at least one of --boot, --activate and --link
  exit 1
fi

if [ -z "$generation" ]; then
  echo "Building the system configuration..." >&2

  tmplink=$(mktemp -d)/result
  nix build -f '<nixpkgs/nixos>' --out-link "$tmplink" system
  if [ $? -eq 1 ]; then
    echo "Something went wrong while building the system configuration."
    exit 1
  fi
  pathToConfig=$(realpath "$tmplink")
else
  echo "Selecting generation $generation" >&2

  pathToConfig="$(realpath "$profile-$generation-link")"
fi

if [ "$link" -eq 1 ]; then
  ln -s "$pathToConfig" "$out"
fi 

if [ "$boot" -eq 1 ]; then
  nix-env -p "$profile" --set "$pathToConfig"

  "$pathToConfig/bin/switch-to-configuration" boot
fi
if [ "$activate" -eq 1 ]; then
  "$pathToConfig/bin/switch-to-configuration" test
fi
